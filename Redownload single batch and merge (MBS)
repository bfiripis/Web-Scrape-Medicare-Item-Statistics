# --- Function to Redownload a Missing Batch ---

# Sometimes the server doesn't respond in time and misses batches.
# This function redownloads a specific batch and merges it into the main results.
#
# Args:
#   batch_number: The index of the batch to redownload (integer).
#   item_batches: A list of item number vectors, where each vector represents a batch.
#   all_results: A list to store the data frames for each processed batch.
#
# Returns:
#   The updated 'all_results' list with the redownloaded batch.
#
# Example Usage:
# redownload_missed_batch(51, item_batches, all_results)

redownload_missed_batch <- function(batch_number, item_batches, all_results) {
  # Validate input
  if (length(item_batches) < batch_number) {
    stop(paste("Batch number", batch_number, "is out of range"))
  }

  # Get the batch items
  current_batch <- item_batches[[batch_number]]

  tryCatch({
    # Make HTTP request
    response <- GET(
      "https://medicarestatistics.humanservices.gov.au/SASStoredProcess/guest",
      query = list(
        "_PROGRAM" = "SBIP://METASERVER/Shared Data/sasdata/prod/VEA0032/SAS.StoredProcess/statistics/mbs_item_standard_report",
        "DRILL" = "ag",
        "group" = paste(current_batch, collapse = ","),
        "VAR" = "benefit",
        "STAT" = "count",
        "RPT_FMT" = "by time period and state",
        "PTYPE" = "month",
        "START_DT" = "199307",
        "END_DT" = "202502"
      ),
      add_headers("User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
    )

    # Handle response
    if (status_code(response) == 200) {
      html_content <- content(response, "text", encoding = "UTF-8")
      html_content <- read_html(html_content)
      table_nodes <- html_content %>% html_nodes("table")

      if (length(table_nodes) > 0) {
        table <- table_nodes %>% .[[1]] %>% html_table(fill = TRUE)
        names(table) <- c("Item", "Month", "NSW", "VIC", "QLD", "SA", "WA", "TAS", "ACT", "NT", "Total")

        # Clean the data
        table <- table %>%
          filter(grepl("^[0-9]+$", Item)) %>%
          filter(!grepl("Total|Month", Month, ignore.case = TRUE)) %>%
          mutate(across(c(-Month), ~as.numeric(gsub(",", "", .))))

        if (nrow(table) > 0) {
          all_results[[batch_number]] <- table
          cat(paste("Batch", batch_number, "redownloaded and added to results.\n"))
        } else {
          all_results[[batch_number]] <- data.frame(
            Item = character(), Month = character(),
            NSW = numeric(), VIC = numeric(), QLD = numeric(),
            SA = numeric(), WA = numeric(), TAS = numeric(),
            ACT = numeric(), NT = numeric(), Total = numeric()
          )
          cat(paste("Batch", batch_number, "redownloaded, but contained no data.\n"))
        }
      } else {
        all_results[[batch_number]] <- data.frame(
          Item = character(), Month = character(),
          NSW = numeric(), VIC = numeric(), QLD = numeric(),
          SA = numeric(), WA = numeric(), TAS = numeric(),
          ACT = numeric(), NT = numeric(), Total = numeric()
        )
        cat(paste("Batch", batch_number, "redownloaded, but contained no table.\n"))
      }
    } else {
      cat(paste("Failed to redownload batch", batch_number, ". HTTP error:", status_code(response), "\n"))
    }
  }, error = function(e) {
    cat(paste("Error redownloading batch", batch_number, ":", e$message, "\n"))
  })

  # Return the updated results list
  return(all_results)
}

# Recombine all results
final_table <- do.call(rbind, all_results)

# Merge data with item metadata (category and group information)
mbs_xml <- read.csv("2025-03-01 MBS-XML-20250301.csv")
item_metadata <- select(mbs_xml, ItemNum, Category, Group, SubGroup)
merged_data <- merge(final_table, item_metadata, by.x = "Item", by.y = "ItemNum")

# Write to csv

output_date <- format(Sys.Date(), "%Y-%m-%d")

file_name <- ifelse(variable == "services", 
                    paste0(output_date, "_mbs_services_data.csv"), 
                    paste0(output_date, "_mbs_benefit_data.csv"))

write.csv(final_table, file_name, row.names = FALSE)

cat("Data scraping and processing complete. Results saved to ", file_name, "\n")
