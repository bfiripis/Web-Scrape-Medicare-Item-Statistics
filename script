library(rvest)
library(dplyr)
library(tidyr)
library(writexl)
library(httr)
library(readxl)

# Read the MBS XML file
mbs_xml <- read_xlsx("2025-03-01 MBS-XML-20250301.xlsx") # Replace with your file path

# Define list of all MBS item numbers
all_items <- mbs_xml$ItemNum

# Function to create batches of items (max 30 per batch)
create_batches <- function(items, batch_size = 30) {
  split(items, ceiling(seq_along(items) / batch_size))
}

# Create batches
item_batches <- create_batches(all_items)

# Initialise an empty list to store results
all_results <- list()

# Function to make the API request and get the HTML content for a given item batch
fetch_html_content <- function(item_batch) {
  query_params <- list(
    "_PROGRAM" = "SBIP://METASERVER/Shared Data/sasdata/prod/VEA0032/SAS.StoredProcess/statistics/mbs_item_standard_report",
    "DRILL" = "ag",
    "group" = paste(item_batch, collapse = ","),
    "VAR" = "service",
    "STAT" = "count",
    "RPT_FMT" = "by time period and state",
    "PTYPE" = "month",
    "START_DT" = "199307",
    "END_DT" = "202502"
  )
  
  # Make the request
  response <- GET(
    "https://medicarestatistics.humanservices.gov.au/SASStoredProcess/guest",
    query = query_params
  )
 
  # Parse and return the HTML content
  content(response, "text", encoding = "UTF-8") %>% read_html()
}

# Function to extract and clean the table from HTML
extract_table <- function(html_content) {
  # Extract the table nodes
  table_nodes <- html_content %>% html_nodes("table")
  
  # Return empty dataframe if no tables found
  if (length(table_nodes) == 0) {
    return(create_empty_table())
  }
  
  # Extract the first table
  table <- table_nodes[[1]] %>% html_table(fill = TRUE)
  
  # Clean the table
  clean_table(table)
}

# Function to clean the table data
clean_table <- function(table) {
  # Standardize column names
  names(table) <- c("Item", "Month", "NSW", "VIC", "QLD", "SA", "WA", "TAS", "ACT", "NT", "Total")
  
  # Filter rows
  table <- table %>%
    # Keep only rows with numeric Item values
    filter(grepl("^[0-9]+$", Item)) %>%
    # Remove rows with "Total" or "Month" in the Month column
    filter(!grepl("Total|Month", Month, ignore.case = TRUE))
  
  # Convert service columns to numeric, removing commas
  table <- table %>%
    mutate(across(c(-Month), ~as.numeric(gsub(",", "", .))))
  
  # Ensure all required columns exist
  ensure_all_columns(table)
}

# Function to ensure all required columns exist
ensure_all_columns <- function(table) {
  required_cols <- c("Item", "Month", "NSW", "VIC", "QLD", "SA", "WA", "TAS", "ACT", "NT", "Total")
  
  # Add missing columns
  missing_cols <- setdiff(required_cols, names(table))
  for (col in missing_cols) {
    table[[col]] <- NA
  }
  
  # Reorder columns to standard order
  table[, required_cols]
}

# Function to create an empty table with the correct structure
create_empty_table <- function() {
  data.frame(
    Item = character(),
    Month = character(),
    NSW = numeric(),
    VIC = numeric(),
    QLD = numeric(),
    SA = numeric(),
    WA = numeric(),
    TAS = numeric(),
    ACT = numeric(),
    NT = numeric(),
    Total = numeric()
  )
}

# Function to process a single batch
process_batch <- function(batch_num, item_batches, all_results) {
  tryCatch({
    # Get the current batch of items
    current_batch <- item_batches[[batch_num]]
    
    # Print progress
    cat(paste("Processing batch", batch_num, "of", length(item_batches), "\n"))
    
    # Be nice to the server
    if (batch_num > 1) {
      cat(paste("Pausing between batches...\n"))
      Sys.sleep(1)
    }
    
    # Fetch and process the data
    html_content <- fetch_html_content(current_batch)
    table <- extract_table(html_content)
    
    # Store results if we have data or create empty table
    if (nrow(table) > 0) {
      all_results[[batch_num]] <- table
    } else {
      all_results[[batch_num]] <- create_empty_table()
    }
    
    cat(paste("Completed batch", batch_num, "of", length(item_batches), "\n"))
    return(all_results)
    
  }, error = function(e) {
    cat(paste("Error processing batch", batch_num, ":", e$message, "\n"))
    return(all_results)
  })
}

# Main function to process all batches
scrape_medicare_item_statistics <- function(item_batches) {
  all_results <- list()
  
  for (batch_num in seq_along(item_batches)) {
    all_results <- process_batch(batch_num, item_batches, all_results)
  }
  
  return(all_results)
}


# Combine all results
final_table <- do.call(rbind, all_results)

pivoted_table <- final_table %>%
  select(Item, Month, NSW, VIC, QLD, SA, WA, TAS, ACT, NT, Total) %>%
  pivot_longer(
    cols = c(NSW, VIC, QLD, SA, WA, TAS, ACT, NT, Total),
    names_to = "State",
    values_to = "Service/Benefit"
  )

# Merge data with item metadata (category and group information)
mbs_xml <- read.csv("2025-03-01 MBS-XML-20250301.csv")
item_metadata <- select(mbs_xml, ItemNum, Category, Group, SubGroup)
merged_data <- merge(final_table, item_metadata, by.x = "Item", by.y = "ItemNum")

# Write to csv
write.csv(merged_data, "2025-04-01_medicare_services_data.csv")

# Print completion message
cat("Data scraping and processing complete. Results saved to medicare_services_data.csv\n")
